services:
  postgres:
    container_name: postgres
    restart: always
    image: postgres:17.6-alpine3.22
    hostname: postgres
    networks:
      - db
    expose:
      - "5432"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - ./pgdata:/var/lib/postgresql/data/pgdata

  redis:
    image: redis:8.2.1-alpine3.22
    container_name: redis
    networks:
      - db
    expose:
      - "6379"
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DATABASES=16
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - ./redis-data:/data

  builder:
    container_name: builder
    build:
      context: .
      dockerfile: Dockerfile
    image: "web:local"
    entrypoint: [ "sh", "-c", "chmod +x /app/tools/builder && /app/tools/builder && chmod -x /app/tools/builder" ]
    volumes:
      - ./:/app
      - ./staticfiles:/app/staticfiles
    networks:
      - db
    environment:
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
    healthcheck:
      test: [ "CMD-SHELL", "test -f /tmp/flag" ]
      interval: 5s
      timeout: 5s
      retries: 1000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  web:
    container_name: web
    image: "web:local"
    hostname: web
    restart: always
    stop_signal: SIGINT
    entrypoint: [ "sh", "-c", "gunicorn vSite.wsgi --workers 3 --bind 0.0.0.0:8000" ]
    networks:
      - db
      - vsite
    expose:
      - "8000"
    environment:
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
    healthcheck:
      test: netstat -n | grep ':8000' | wc -l || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - ./:/app
      - ./staticfiles:/app/staticfiles
      - ./mediafiles:/app/mediafiles
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  nginx:
    container_name: nginx-proxy
    image: nginx:1.29-alpine3.22
    networks:
      - vsite
    ports:
      - "443:443"
      - "80:80"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx_log:/var/log/nginx
      - ./staticfiles:/app/staticfiles:ro
      - ./mediafiles:/app/mediafiles
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      web:
        condition: service_healthy

volumes:
  pgdata:
  redis-data:
  nginx_log:
  staticfiles:
  mediafiles:
  certs:

networks:
  db:
    name: db
    driver: local

  vsite:
    name: vsite
    driver: bridge