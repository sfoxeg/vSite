services:
  db:
    container_name: vsite-db
    restart: always
    image: postgres:17.6-alpine3.22
    hostname: postgres
    networks:
      - vsite
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - ./pgdata:/var/lib/postgresql/data/pgdata

  builder:
    container_name: vsite-web-builder
    build:
      context: .
      dockerfile: Dockerfile
    image: "web:local"
    entrypoint: [ "sh", "-c", "/app/builder" ]
    volumes:
      - "./:/app"
    networks:
      - vsite
    init: true # helps with signal forwarding and process reaping
    tty: true
    stdin_open: true
    environment:
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
    healthcheck:
      test: [ "CMD-SHELL", "test -f /tmp/flag" ]
      interval: 5s
      timeout: 5s
      retries: 1000
    depends_on:
      db:
        condition: service_healthy

  web:
    container_name: vsite-web
    image: "web:local"
    hostname: web
    restart: always
    stop_signal: SIGINT
    entrypoint: [ "sh", "-c", "gunicorn vSite.wsgi --bind 127.0.0.1:8000" ]
    networks:
      - vsite
    ports:
      - "8000:8000"
    environment:
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
    healthcheck:
      test: netstat -n | grep ':8000' | wc -l || exit 1
      start_period: 1m
      start_interval: 10s
      interval: 1m
      timeout: 5s
      retries: 3
    volumes:
      - "./:/app:ro"
      - "/tmp:/tmp"
    depends_on:
      builder:
        condition: service_healthy

  nginx:
    image: nginx:1.29-alpine3.22
    networks:
      - vsite
    ports:
      - 8080:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro # Mount custom Nginx configuration
      - static_volume:/app/static
    depends_on:
      web:
        condition: service_healthy

volumes:
  pgdata:
  static_volume:

networks:
  vsite:
    name: vsite
    driver: bridge